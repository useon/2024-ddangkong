name: BE CD for Prod

on:
  workflow_dispatch:

  push:
    branches: [ "main" ]
    paths:
      - backend/**

env:
  ARTIFACT_NAME: app-artifact
  JAR_NAME: app.jar
  APP_PATH: ~/app

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    outputs:
      artifact_name: ${{ env.ARTIFACT_NAME }}
      jar_name: ${{ env.JAR_NAME }}

    steps:    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setting prod-secret.yml
        run: |
          echo "${{ secrets.PROD_SECRET_YML }}" > ./src/main/resources/prod-secret.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: BootJar with Gradle
        run: ./gradlew bootJar

      - name: Move artifact file
        run: |
          mkdir -p ${{ env.ARTIFACT_NAME }} && \
          mv build/libs/*.jar ${{ env.ARTIFACT_NAME }}/${{ env.JAR_NAME }} && \
          mv scripts/* ${{ env.ARTIFACT_NAME }}/

      - name: Upload artifact file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./backend/${{ env.ARTIFACT_NAME }}

  deploy:
    needs: [ build ]
    runs-on: [ prod-c, prod-d ] # 추후 변경 prod-a, prod-b 및 그룹
    outputs:
      blue_port: ${{ steps.blue_green_port.outputs.blue_port }}
      green_port: ${{ steps.blue_green_port.outputs.green_port }}

    steps:
      - name: Download artifact file
        uses: actions/download-artifact@v4
        with:
            name: ${{ env.ARTIFACT_NAME }}
            path: ${{ env.APP_PATH }}

      - name: Get Blue Green Port
        id: blue_green_port
        run: |
          chmod +x ${{ env.APP_PATH }}/*.sh && \
          ${{ env.APP_PATH }}/get_blue_green_port.sh | awk '{print $0}' >> $GITHUB_OUTPUT

      - name: Green Up
        run: sudo nohup java -Dspring.profiles.active=prod -Dserver.port=${{ steps.blue_green_port.outputs.green_port }} -Duser.timezone=Asia/Seoul -jar ${{ env.APP_PATH }}/${{ env.JAR_NAME }} &

      - name: Health Check
        run: |
          ${{ env.APP_PATH }}/green_health_check.sh ${{ steps.blue_green_port.outputs.green_port }}

      # - name: Deploy green
      #   uses: ./.github/actions/self-hosted-runner-deployment.yml
      #   with:
      #     artifact_name: ${{ needs.build.outputs.artifact_name }}
      #     jar_name: ${{ needs.build.outputs.jar_name }}
      #     profile: prod
  
  green-rollback:
    needs: [ deploy ]
    runs-on: [ prod-c, prod-d ] # 추후 변경 prod-a, prod-b
    if: ${{ needs.deploy.result == 'failure' }}
    steps:
      - name: Rollback # todo 디코 알림
        run: | 
          echo "Green deploy failed"
          sudo lsof -i :${{ needs.deploy.outputs.green_port }} | awk 'NR!=1 {print $2}' | xargs kill -9
          exit 1

  nginx-config:
    needs: [ deploy ]
    runs-on: [ prod-c, prod-d ] # 추후 변경 prod-a, prod-b
    if: ${{ needs.deploy.result == 'success' }}
    steps:
      - name: Change Nginx Config
        run: |
          ${{ env.APP_PATH }}/change_nginx_port_forwarding.sh ${{ needs.deploy.outputs.green_port }}
      
      - name: Rollback
        if: ${{ failure() }}
        run: |
          echo "Nginx Config Change failed"
          echo "Rollback Nginx Config and Green deployment"
          ${{ env.APP_PATH }}/change_nginx_port_forwarding.sh ${{ needs.deploy.outputs.blue_port }}
          sudo lsof -i :${{ needs.deploy.outputs.green_port }} | awk 'NR!=1 {print $2}' | xargs kill -9
          exit 1
  
  blue-down:
    needs: [ nginx-config ]
    runs-on: [ prod-c, prod-d ] # 추후 변경 prod-a, prod-b
    steps:
      - name: Blue Down
        run: |
          sudo kill -15 $(sudo lsof -t -i: ${{ needs.deploy.outputs.blue_port }})
          echo "Blue Down completed"

  on-failure:
    needs: [ blue-down ] # 알림
    runs-on: [ prod-c, prod-d ] # 추후 변경 prod-a, prod-b
    if: ${{ needs.blue-down.result == 'failure' }}
    steps:
      - name: Send Notification
        run: echo "테스트입니다"
